/*
 * NRF2401.h
 *
 *  Created on: 2014年5月11日
 *      Author: lvniqi
 *      Email: lvniqi@gmail.com
 */
#ifndef NRF2401_H_
#define NRF2401_H_
#include "SPI.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//NRF24L01寄存器操作命令
#define NRF_READ_REG        0x00  //读配置寄存器,低5位为寄存器地址
#define NRF_WRITE_REG       0x20  //写配置寄存器,低5位为寄存器地址
#define NRF_RD_RX_PLOAD     0x61  //读RX有效数据,1~32字节
#define NRF_WR_TX_PLOAD     0xA0  //写TX有效数据,1~32字节
#define NRF_FLUSH_TX        0xE1  //清除TX FIFO寄存器.发射模式下用
#define NRF_FLUSH_RX        0xE2  //清除RX FIFO寄存器.接收模式下用
#define NRF_REUSE_TX_PL     0xE3  //重新使用上一包数据,CE为高,数据包被不断发送.
#define NRF_NOP             0xFF  //空操作,可以用来读状态寄存器	 
//SPI(NRF24L01)寄存器地址
#define NRF_CONFIG          0x00  //配置寄存器地址;bit0:1接收模式,0发射模式;bit1:电选择;bit2:CRC模式;bit3:CRC使能;
//bit4:中断MAX_RT(达到最大重发次数中断)使能;bit5:中断TX_DS使能;bit6:中断RX_DR使能
#define NRF_EN_AA           0x01  //使能自动应答功能  bit0~5,对应通道0~5
#define NRF_EN_RXADDR       0x02  //接收地址允许,bit0~5,对应通道0~5
#define NRF_SETUP_AW        0x03  //设置地址宽度(所有数据通道):bit1,0:00,3字节;01,4字节;02,5字节;
#define NRF_SETUP_RETR      0x04  //建立自动重发;bit3:0,自动重发计数器;bit7:4,自动重发延时 250*x+86us
#define NRF_RF_CH           0x05  //RF通道,bit6:0,工作通道频率;
#define NRF_RF_SETUP        0x06  //RF寄存器;bit3:传输速率(0:1Mbps,1:2Mbps);bit2:1,发射功率;bit0:低噪声放大器增益
#define NRF_STATUS          0x07  //状态寄存器;bit0:TX FIFO满标志;bit3:1,接收数据通道号(最大:6);bit4,达到最多次重发
//bit5:数据发送完成中断;bit6:接收数据中断;
#define NRF_MAX_TX  		0x10  //达到最大发送次数中断
#define NRF_TX_OK   		0x20  //TX发送完成中断
#define NRF_RX_OK   		0x40  //接收到数据中断
#define NRF_OBSERVE_TX      0x08  //发送检测寄存器,bit7:4,数据包丢失计数器;bit3:0,重发计数器
#define NRF_CD              0x09  //载波检测寄存器,bit0,载波检测;
#define NRF_RX_ADDR_P0      0x0A  //数据通道0接收地址,最大长度5个字节,低字节在前
#define NRF_RX_ADDR_P1      0x0B  //数据通道1接收地址,最大长度5个字节,低字节在前
#define NRF_RX_ADDR_P2      0x0C  //数据通道2接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;
#define NRF_RX_ADDR_P3      0x0D  //数据通道3接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;
#define NRF_RX_ADDR_P4      0x0E  //数据通道4接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;
#define NRF_RX_ADDR_P5      0x0F  //数据通道5接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;
#define NRF_TX_ADDR         0x10  //发送地址(低字节在前),ShockBurstTM模式下,RX_ADDR_P0与此地址相等
#define NRF_RX_PW_P0        0x11  //接收数据通道0有效数据宽度(1~32字节),设置为0则非法
#define NRF_RX_PW_P1        0x12  //接收数据通道1有效数据宽度(1~32字节),设置为0则非法
#define NRF_RX_PW_P2        0x13  //接收数据通道2有效数据宽度(1~32字节),设置为0则非法
#define NRF_RX_PW_P3        0x14  //接收数据通道3有效数据宽度(1~32字节),设置为0则非法
#define NRF_RX_PW_P4        0x15  //接收数据通道4有效数据宽度(1~32字节),设置为0则非法
#define NRF_RX_PW_P5        0x16  //接收数据通道5有效数据宽度(1~32字节),设置为0则非法
#define NRF_NRF_FIFO_STATUS 0x17  //FIFO状态寄存器;bit0,RX FIFO寄存器空标志;bit1,RX FIFO满标志;bit2,3,保留
#define NRF_DYNPD	    0x1C
#define NRF_FEATURE	    0x1D
//bit4,TX FIFO空标志;bit5,TX FIFO满标志;bit6,1,循环发送上一数据包.0,不循环;


/* Bit Mnemonics */
#define MASK_RX_DR  6
#define MASK_TX_DS  5
#define MASK_MAX_RT 4
#define EN_CRC      3
#define CRCO        2
#define PWR_UP      1
#define PRIM_RX     0
#define ENAA_P5     5
#define ENAA_P4     4
#define ENAA_P3     3
#define ENAA_P2     2
#define ENAA_P1     1
#define ENAA_P0     0
#define ERX_P5      5
#define ERX_P4      4
#define ERX_P3      3
#define ERX_P2      2
#define ERX_P1      1
#define ERX_P0      0
#define AW          0
#define ARD         4
#define ARC         0
#define PLL_LOCK    4
#define RF_DR       3
#define RF_PWR      6
#define RX_DR       6
#define TX_DS       5
#define MAX_RT      4
#define RX_P_NO     1
#define TX_FULL     0
#define PLOS_CNT    4
#define ARC_CNT     0
#define TX_REUSE    6
#define FIFO_FULL   5
#define TX_EMPTY    4
#define RX_FULL     1
#define RX_EMPTY    0
#define DPL_P5	    5
#define DPL_P4	    4
#define DPL_P3	    3
#define DPL_P2	    2
#define DPL_P1	    1
#define DPL_P0	    0
#define EN_DPL	    2
#define EN_ACK_PAY  1
#define EN_DYN_ACK  0


//////////////////////////////////////////////////////////////////////////////////////////////////////////
//24L01操作线
#define NRF24L01_CE   PBout(2) //使能信号
#define NRF24L01_CSN  PBout(12) //SPI片选信号
#define NRF24L01_NSS  NRF24L01_CSN	   //SPI片选信号
#define NRF24L01_IRQ  PCin(5)  //IRQ主机数据输入
//24L01发送接收数据宽度定义
#define NRF_TX_ADR_WIDTH    5   	//5字节的地址宽度
#define NRF_RX_ADR_WIDTH    5   	//5字节的地址宽度
#define NRF_TX_PLOAD_WIDTH  32  	//32字节的用户数据宽度
#define NRF_RX_PLOAD_WIDTH  32  	//32字节的用户数据宽度

extern const u8 P0_ADDRESS[NRF_TX_ADR_WIDTH];
extern const u8 P1_ADDRESS[NRF_RX_ADR_WIDTH];
extern void InitNrf2401(void);
extern u8 Nrf2401_Check(void);
extern void Nrf2401_Open(void);
extern void NRF24L01_TX_Mode(void);
#endif /* NRF2401_H_ */
